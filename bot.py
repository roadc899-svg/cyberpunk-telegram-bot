import asyncio
import os
import random
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ Render Environment
TOKEN = os.getenv("BOT_TOKEN")
DELAY_SECONDS = 0.8

# ================================
# üî∞ –¢–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏
# ================================
CYBER_STEPS = [
    "[BOOT SEQUENCE INITIATED] ‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí",
    "Step 1/10: Scanning neural grids... ‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí",
    "Step 2/10: Decrypting cortex shard... ‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí",
    "Step 3/10: Injecting synth-protocols... ‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí",
    "Step 4/10: Overclocking cyber-threads... ‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí",
    "Step 5/10: Patching memory splinters... ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí",
    "Step 6/10: Syncing black-ops node... ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí",
    "Step 7/10: Calibrating holo-interface... ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí",
    "Step 8/10: Seeding phantom drivers... ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà",
    "Step 9/10: Finalizing spectral handshake... ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí",
    "Step 10/10: Stabilizing matrix core... ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà",
    "‚úÖ SYSTEM ONLINE ‚Äî ACCESS GRANTED"
]

# ================================
# üî∞ /start –∫–æ–º–∞–Ω–¥–∞
# ================================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = await update.message.reply_text("Initializing protocol...")
    for step in CYBER_STEPS:
        await asyncio.sleep(DELAY_SECONDS)
        try:
            await msg.edit_text(step)
        except Exception as e:
            print(f"‚ö†Ô∏è Edit error: {e}")
            continue
    await msg.reply_text("‚úÖ Installation complete. System ready.")


# ================================
# üî∞ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ================================
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    print("‚úÖ Bot started and listening...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
